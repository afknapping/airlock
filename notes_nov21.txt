I will translate parts of the UrsusAirlock next

Good graph store initial reference - https://gist.github.com/tylershuster/4e3195c952495e9746e53937b5f73a06



https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events


OMG figuring out what I should do to be able to use InMemoryCookieStore was the most confusing thing ever and it took like 50 minutes
because I didn't want to use `PersistentCookieStore` 3rd party dependency. Java is hell (https://github.com/franmontiel/PersistentCookieJar)
Turns out that only when the cookie store is passed as null do you get an inmemorycookiestore, and furthermore somehow InMemoryCookieStore is private or something so I couldn't instatntiate it like normal
All in all, the documentation is poor and there are no clear examples for handling cookies.


Also Omg this sucks. Okhttp `Response` obj is ephemeral and not suitable as an immutable data structure. once .body() is called once on it to get the content of the response,
it will exhaust the backing buffer and not be available for subsequent calls, thus being useless as a datastructure. :(((((( sadness. it seems i have to
https://github.com/square/okhttp/issues/2869 copy into a separate buffer. idk if there is a immutable datastructure that even represents an http response
i might just change to a differetn http libarry later. maybe if i read the docs i would know that :p

Okay, so as per https://github.com/square/okhttp/issues/4177,
the devs really don't give a f about making an immutable response container so they reccomend creating your own
`InMemoryResponseBody` container type, which i mean like aHHHHHHHHHHHHHHH. this is more uncertainty in how i should design the api :|
Also, this https://github.com/square/okhttp/issues/2869
https://github.com/FasterXML/jackson

https://www.codota.com/code/java/classes/okhttp3.ResponseBody
found this: https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit2/Utils.java#L320
which idk makes a copy of it


Also https://github.com/kittinunf/Forge lookin kinda good

Junit reference: https://www.vogella.com/tutorials/JUnit/article.html

https://loopj.com/android-async-http/doc/com/loopj/android/http/PersistentCookieStore.html
https://www.baeldung.com/cookies-java
https://stackoverflow.com/questions/34881775/automatic-cookie-handling-with-okhttp-3
https://www.twilio.com/blog/5-ways-to-make-http-requests-in-java


airlock references
https://github.com/lukechampine/go-urbit/blob/master/airlock/airlock_test.go
https://github.com/dclelland/UrsusAirlock/
https://github.com/dclelland/UrsusChat
https://github.com/tylershuster/urbit/
https://urbit.org/using/integrating-api/
https://github.com/urbit/urbit/blob/master/pkg/interface/src/logic/api/base.ts#L57-L68
https://github.com/urbit/urbit/tree/master/pkg/interface/src/logic/api
https://gist.github.com/tylershuster/74d69e09650df5a86c4d8d8f00101b42
https://docs.google.com/document/d/1no5oos_NE8LrUWz7iG9SKZMTIzruZVevZQ75nD5OHmI/edit


futures
https://www.baeldung.com/java-completablefuture
https://stackoverflow.com/questions/35329845/difference-between-completablefuture-future-and-rxjavas-observable
https://stackoverflow.com/questions/631598/how-to-use-junit-to-test-asynchronous-processes








